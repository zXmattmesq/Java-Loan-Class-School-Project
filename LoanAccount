import java.util.ArrayList;

public class LoanAccount {

    public double annualInterestRate;
    
    public double principal;

    public int months;

    public LoanAccount(double principal, double annualInterestRate, int months) {
        this.principal = principal;
        this.months = months;
        this.annualInterestRate = annualInterestRate;
    }

    
    
    public double calculateMonthlyPayment( ){
        annualInterestRate /= 100;
        double monthlyInterest = annualInterestRate/12;
        double monthlyPayment = principal * ( monthlyInterest / (1 - Math.pow(1 + monthlyInterest, -months)));
        return monthlyPayment;
    }  

    public double getAnnualInterestRate() {
        return annualInterestRate;

    }

    public double getprincipal() {
        return principal;

    }

    public double getMonths() {
        return months;

    }

    public String toString() {
        return String.format(
            "\nLoanAccount with:"
            + "\nPrincipal: $%.2f"
            + "\nAnnual Interest Rate: %.2f%%"
            + "\nTerm of Loan in Months: " + months
            + "\nMonthly Payment: $%.2f"
            + "\n",
            principal, annualInterestRate, calculateMonthlyPayment());

    }
      

}

class CarLoan extends LoanAccount {

    String vehicleVIN;

    public CarLoan(double principal, double annualInterestRate, int months, String vehicleVIN) {
        super(principal, annualInterestRate, months);
        this.vehicleVIN = vehicleVIN;

    }

    @Override
    public String toString() {
        return String.format(
            "\nCar Loan with:"
            + "\nPrincipal: $%.2f"
            + "\nAnnual Interest Rate: %.2f%%"
            + "\nTerm of Loan in Months: " + months
            + "\nMonthly Payment: $%.2f"
            + "\nVehicle VIN: %s"
            + "\n",
            principal, annualInterestRate, calculateMonthlyPayment(), vehicleVIN);

    }
  
}

class PrimaryMortgage extends LoanAccount {

    private double PMIMonthlyAmount;

    private Address Address;

    public PrimaryMortgage(double principal, double annualInterestRate, int months, double PMIMonthlyAmount, Address propertyAddress) {
        super(principal, annualInterestRate, months);
        this.PMIMonthlyAmount = PMIMonthlyAmount;
        this.Address = propertyAddress;
        
    }

    @Override
    public String toString() {
        return String.format(
            "\nPrimary Mortgage Loan with:"
            + "\nPrincipal: $%.2f"
            + "\nAnnual Interest Rate: %.2f%%"
            + "\nTerm of Loan in Months: " + months
            + "\nMonthly Payment: $%.2f"
            + "\nPMI Monthly Amount: $%.2f"
            + "\nProperty Address: %s"
            + "\n",
            principal, annualInterestRate, calculateMonthlyPayment(), PMIMonthlyAmount, Address);

    }

}

class UnsecuredLoan extends LoanAccount {

    public UnsecuredLoan(double principal, double annualInterestRate, int months) {
        super(principal, annualInterestRate, months);
        
    }
    @Override
    public String toString(){
        return String.format(
            "\nUnsecured Loan with:"
            + "\nPrincipal: $%.2f"
            + "\nAnnual Interest Rate: %.2f%%"
            + "\nTerm of Loan in Months: " + months
            + "\nMonthly Payment: $%.2f"
            + "\n",
            principal, annualInterestRate, calculateMonthlyPayment());
      
    }
}

class Address {

    String street;
    String city;
    String state;
    String zipcode;

    public Address(String street, String city, String state, String zipcode) {
        this.street = street;
        this.city = city;
        this.state = state;
        this.zipcode = zipcode;

    }

    public String getStreet() {
        return (street);
    
    }
    
    public String getCity() {
        return (city);
    
    }

    public String getState() {
        return (state);
    
    }

    public String getZipcode() {
        return (zipcode);
    
    }
    
    public String toString() {
        return
             "\n" + "  " + street + "\n" + "  " + city + "," + " " + state + " " + zipcode + "\n";
        
    }
}    

class Customer {

    private String firstName;

    private String lastName;

    private String SSN;

    private ArrayList<LoanAccount> loanAccounts;


    public String getFirstName() {
        return firstName;

    }

    public String getLastName() {
        return lastName;

    }

    public String getSSN() {
        return SSN;

    }

    public Customer(String firstName, String lastName, String SSN) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.SSN = SSN;
        this.loanAccounts = new ArrayList<>();
        
    }

    public void addLoanAccount(CarLoan account) {
        this.loanAccounts.add(account);

    }

    public void addLoanAccount(PrimaryMortgage account) {
        this.loanAccounts.add(account);

    }

    public void addLoanAccount(UnsecuredLoan account) {
        this.loanAccounts.add(account);

    }
    
    public void printMonthlyReport() {
        System.out.println("Account Report for Customer:" + this.firstName + this.lastName + "with SSN:" + this.SSN);
        for (LoanAccount account : this.loanAccounts) {
            System.out.println(account.toString());

        }
    }




public static void main(String[] args) {

     // Create different loan objects, at least one of each type.
        CarLoan carLoan1 = new CarLoan(25000.00, 4.9, 72, "IRQ3458977");
        CarLoan carLoan2 = new CarLoan(12000.00, 5, 60, "NXK6767876");
        
        Address propertyAddress1 = new Address("321 Main Street", "State College", "PA", "16801");
        PrimaryMortgage propertyLoan1 = new PrimaryMortgage(250000.00, 3.75, 360, 35.12, propertyAddress1);
        Address propertyAddress2 = new Address("783 Maple Lane", "State College", "PA", "16801");
        PrimaryMortgage propertyLoan2 = new PrimaryMortgage(375000.00, 2.5, 360, 53.12, propertyAddress2);
        
        UnsecuredLoan unsecuredLoan = new UnsecuredLoan(5000.00, 10.75, 48);
        
        // create customers
        Customer customerA = new Customer("Tony", "Stark", "111-22-3333");
        Customer customerB = new Customer("Gal", "Gadot", "444-55-6666");
        
        // add loans for the customers.
        customerA.addLoanAccount(carLoan1);
        customerA.addLoanAccount(propertyLoan1);
        customerA.addLoanAccount(unsecuredLoan);
        
        customerB.addLoanAccount(carLoan2);
        customerB.addLoanAccount(propertyLoan2);
        
        // add the customers to an arraylist of customers.
        ArrayList<Customer> customers = new ArrayList<>();
        customers.add(customerA);
        customers.add(customerB);
        
        //Print out the loan information for each customer polymorhically.
        System.out.println("Monthly Report of Customers by Loan Account");
        for (Customer customer:customers)
        {
            customer.printMonthlyReport();
        }

}
}
